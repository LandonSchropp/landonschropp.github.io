{"version":3,"file":"component---src-pages-articles-article-slug-jsx-45823d29de39f00dd638.js","mappings":"8MAgDe,SAASA,EAAT,GAAgC,IAAX,KAAEC,GAAQ,EAC5C,OAAO,gBAAC,IAAD,CACLC,MAAS,oBAAoBD,EAAKE,QAAQD,QAC1CE,YAAcH,EAAKE,QAAQC,aAE3B,gBAAC,EAAAC,QAAD,CAASF,QAAUF,EAAKE,QAAUG,QAAUL,EAAKM,IAAIC","sources":["webpack://landonschropp.com/./src/pages/articles/{article.slug}.jsx"],"sourcesContent":["import { graphql } from \"gatsby\";\nimport { Article } from \"landon-schropp-gatsby-theme\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport { Layout } from \"../../components/layout\";\n\n// NOTE: I'm using $slug here instead of ID because the transformed article node is no longer tied\n// to the MDX node.\nexport const query = graphql`\n  query Article($slug: String) {\n    mdx(frontmatter: {Slug: {eq: $slug}}) {\n      body\n    }\n    article(slug: {eq: $slug}) {\n      title\n      slug\n      date\n      description\n      url\n      publisher\n      published\n    }\n  }\n`;\n\n// HACK: This uses the deferral API to prevent external articles from being statically generated.\n// Since this site is not hosted with a Gatsby server, this prevents the pages from ever being\n// generated.\nexport async function config() {\n  const { data } = graphql`\n    query ArticleUrls {\n      allArticle {\n        nodes {\n          slug\n          url\n        }\n      }\n    }\n  `;\n\n  return ({ params: { slug } }) => {\n    let url = _.find(data.allArticle.nodes, { slug })?.url;\n    return { defer: !_.isNil(url) };\n  };\n}\n\nexport default function ArticlePage({ data }) {\n  return <Layout\n    title={ `Landon Schropp - ${ data.article.title }` }\n    description={ data.article.description }\n  >\n    <Article article={ data.article } content={ data.mdx.body } />\n  </Layout>;\n}\n\nArticlePage.propTypes = {\n  data: PropTypes.object\n};\n"],"names":["ArticlePage","data","title","article","description","Article","content","mdx","body"],"sourceRoot":""}
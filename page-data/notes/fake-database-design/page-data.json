{
    "componentChunkName": "component---src-templates-note-template-jsx",
    "path": "/notes/fake-database-design",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to Fake a Database Design\",\n  \"Authors\": \"Curtis Poe\",\n  \"Published\": true,\n  \"Media\": {\n    \"id\": \"Mp=f\",\n    \"name\": \"Talk\",\n    \"color\": \"default\"\n  },\n  \"Slug\": \"fake-database-design\",\n  \"Source\": \"YAPC Eurpose 2014\",\n  \"Date\": {\n    \"start\": \"2022-02-06T00:00:00.000Z\",\n    \"end\": null,\n    \"time_zone\": null\n  },\n  \"Category\": {\n    \"id\": \"7c590fdc-8922-4760-8d45-5b3cf6f6b991\",\n    \"name\": \"Development\",\n    \"color\": \"default\"\n  },\n  \"Type\": {\n    \"type\": \"string\",\n    \"string\": \"Note\"\n  },\n  \"URL\": \"https://www.youtube.com/watch?v=y1tcbhWLiUM\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Developers are generally bad at database design, even when they are great at SQL.\"), mdx(\"p\", null, \"What does it mean to have a well-designed database?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"G\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"enerally normalized\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Denormalized only as necessary\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No data is duplicated\")), mdx(\"h3\", null, \"Rules for Designing Good Databases\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Nouns == tables.\"), \" A good place to start is by building your tables out from the nouns in the domain.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When you\\u2019re determining if a noun should be a column within another table or a table by itself, consider if that noun \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"wholely\"), \" belongs to that table. In other worse, does the noun make sense separated from the rest of the table? For example, it wouldn\\u2019t make sense to separate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" column from a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"people\"), \" table because the name is completely tied to the person. However, it may make sense to separate an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"address\"), \" column from a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"customers\"), \" table if the address can be considered in other contexts.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Use foreign key constraints. \"), \"If one table uses an ID from another table, it must use a foreign key constraint. These constraints help to maintain \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"referential integrity\"), \", which prevents bad references. If you don\\u2019t use foreign key constraints, your data will inevitably end up inconsistent.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Lists of things get their own table.\"), \" You can loosely define a list as something that can have zero, one or many elements (with exceptions).\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Many-to-many relationships should use a lookup table.\"), \" These relationships should use foreign key constraints.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Equality \\u2260 Identity.\"), \" When we say no duplication, we mean not duplicating the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"identity\"), \" of two things. It\\u2019s completely possible for two records to share the same data but to be unique instances. For example, you could have two records in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"people\"), \" that both have the name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"John Smith\"), \" but still represents unique individuals.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This rule can be summed up as: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"watch for equal values that aren\\u2019t identical.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Name columns as descriptively as possible.\"), \" Names are very important in databases. Names should hint at their use. You should carefully consider the names of things. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In a well-designed database, it should be hard to insert bad data.\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"He doesn\\u2019t like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" columns. He\\u2019d prefer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<table>_id\"), \". I don\\u2019t agree with this convention.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Avoid \"), mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"**null**\"), mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" values.\"), \" Curtis thinks about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" as \\u201Cunknown\\u201D, while many people think of it as \\u201Cnothing\\u201D. Columns have types, but nulls by definition are unknown and thus don\\u2019t have types. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This is why the standard operators don\\u2019t apply to \"), mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_null_\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \".\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Curtis argues that often the data in a nullable column really belongs in a separate table. Rather than fighting this nature, he advocates for extracting the data and then letting the existence or non-existence of the record encode the nullness of the data.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"I\\u2019m not sure I agree with this one. I like the idea of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" to represent nothing. I do agree that we should limit the use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \", but I\\u2019d rather have an explicit value for \\u201Cnothing\\u201D than to rely on a convention (such as an empty string).\"))), mdx(\"h3\", null, \"Jargon\"), mdx(\"p\", null, \"Curtis mentions several terms during his talk. While his talk isn\\u2019t about formal terminology, I thought it might still be helpful to note down some of the definitions.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Normalization:\"), \" \\u201C\", \"[The]\", \" process of structuring a database, usually a relational database, in accordance with a series of so-called normal forms in order to reduce data redundancy and improve data integrity.\\u201D (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Database_normalization\"\n  }, \"Wikipedia\"), \") This idea was first proposed by Edgar F. Codd as part of his relational model. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"A database is typically said to be normalized if it meets the third normal form (3NF).\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Normal forms: \"), \"These are a hierarchy of rules that can be applied to databases. Each rule adds a new constraint.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/d06ea855-169d-432f-a9a9-d44c53f40d16/Screen_Shot_2022-02-06_at_6.35.36_PM.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230824%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230824T202130Z&X-Amz-Expires=3600&X-Amz-Signature=6436a9a9c559890f48e979e64d5e33725c4dac140ad0ad11a7fa86f991259d76&X-Amz-SignedHeaders=host&x-id=GetObject\",\n    \"alt\": null\n  }))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Data integrity:\"), \" \\\"Data integrity is the overall accuracy, completeness, and consistency of data. Data integrity also refers to the safety of data in regard to regulatory compliance \\u2014 such as GDPR compliance \\u2014 and security. It is maintained by a collection of processes, rules, and standards implemented during the design phase.\\u201D (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.talend.com/resources/what-is-data-integrity/\"\n  }, \"talend\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Data definition language (DDL):\"), \" \\u201CA syntax for creating and modifying database objects such as tables, indices, and users\\u201D (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Data_definition_language\"\n  }, \"Wikipedia\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Surrogate key:\"), \" An artificially generated key that uniquely identifies a row. This key should have no semantic relationships with the data in the record. An example might be a UUID. The primary advantage of using surrogate keys is that the identifier is insulated from changes to the data.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Natural key: \"), \"A unique key tied to the data in a record. An example might be a zip code acting as a primary key to identify a mail delivery zone. These are also called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"business keys\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"domain keys.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Referential integrity:\"), \" All of the references (via foreign keys) are valid. This ensures references that are non-existent can\\u2019t be created or updated, and that records can\\u2019t be deleted while they\\u2019re referenced elsewhere.\"))));\n}\n;\nMDXContent.isMDXComponent = true;"},"note":{"authors":["Curtis Poe"],"category":"Development","media":"Talk","date":"2022-02-06","published":true,"slug":"fake-database-design","source":"YAPC Eurpose 2014","title":"How to Fake a Database Design","url":"https://www.youtube.com/watch?v=y1tcbhWLiUM"}},"pageContext":{"slug":"fake-database-design"}},
    "staticQueryHashes": []}
{
    "componentChunkName": "component---src-templates-note-template-jsx",
    "path": "/notes/database-normalization",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Database Normalization\",\n  \"Authors\": \"\",\n  \"Published\": true,\n  \"Media\": {\n    \"id\": \"839ac8b9-f780-4e24-98d6-314d0ca385d5\",\n    \"name\": \"Video\",\n    \"color\": \"default\"\n  },\n  \"Slug\": \"database-normalization\",\n  \"Source\": \"Studytonight\",\n  \"Date\": {\n    \"start\": \"2022-02-18T00:00:00.000Z\",\n    \"end\": null,\n    \"time_zone\": null\n  },\n  \"Category\": {\n    \"id\": \"7c590fdc-8922-4760-8d45-5b3cf6f6b991\",\n    \"name\": \"Development\",\n    \"color\": \"default\"\n  },\n  \"Type\": {\n    \"type\": \"string\",\n    \"string\": \"Note\"\n  },\n  \"URL\": \"https://www.youtube.com/watch?v=xoTyrdT9SZI\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Normalization\"), \" is a technique of organizing data into multiple, related tables to minimize \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"data redundancy.\"))), mdx(\"p\", null, \"Data redundancy is the representation of data in multiple places. This has many drawbacks:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Size:\"), \" Redundant data takes up extra space.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Insertion anomaly:\"), \" When you\\u2019re inserting duplicate data, you\\u2019re creating data redundancies.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Updation anomaly:\"), \" If you need to update duplicated data, you have to do so in all of the places where it\\u2019s referenced. \\u201CIf even a single row is left out, it will lead to inconsistent data.\\u201D\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Deletion anomaly:\"), \" If we delete all instances of the redundant data in our database, we can unintentionally delete the associated context as well. When data exists in columns that belong in a separate table, there\\u2019s no way for us to represent the case where there are 0 records.\")), mdx(\"p\", null, \"Normalization solves these problems. The goal is to create \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"logical\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"independent\"), \", but \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"related\"), \" data.\"), mdx(\"p\", null, \"There are three basic normal forms. Each form requires the previous forms as prerequisites.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"First Normal Form (1NF):\"), \" Design your table \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"scalably\"), \" so it can be easily extended. Each column should contain atomic values. Do not intermix values in any column. Each column should have a unique name. The order in which you store your data doesn\\u2019t matter.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Second Normal Form (2NF):\"), \" \\u201CThere should be no \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"partial dependency\"), \" in the data.\\u201D No attribute should depend on only \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"part\"), \" of the primary key. In other words, a non-prime attribute depends on a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"part\"), \" of the primary key.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"More formally, a table has a composite key \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ABC\"), \", and there\\u2019s a column \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"D\"), \" that\\u2019s only dependent on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \", then the table has a partial dependency. Don\\u2019t do this!\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"These problems can often creep in when a table uses a composite primary key, but a column only depends on \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"one\"), \" of the columns in the key.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Third Normal Form (3NF):\"), \" Columns can not have \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"transitive dependencies\"), \". This occurs when there is an attribute in the table that depends on a non-primary key. In other words, a non-prime attribute depends on a non-prime attribute.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Formally, if a table has a column \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" that\\u2019s dependent on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \", and both are not prime attributes, then the table has a transitive dependency. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" depends on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \", then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" must be a primary key.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BCNF (Boyce-Codd Normal Form):\"), \" The violation of this normal form occurs when a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"prime attribute\"), \" depends on a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"non-prime attribute.\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For any columnar dependency \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" that depends on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" should be a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"super key \"), \"(a primary key). In simpler terms, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" must be a prime key if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" is not prime.\"))));\n}\n;\nMDXContent.isMDXComponent = true;"},"note":{"authors":[],"category":"Development","media":"Video","date":"2022-02-18","published":true,"slug":"database-normalization","source":"Studytonight","title":"Database Normalization","url":"https://www.youtube.com/watch?v=xoTyrdT9SZI"}},"pageContext":{"slug":"database-normalization"}},
    "staticQueryHashes": []}
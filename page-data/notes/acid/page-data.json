{
    "componentChunkName": "component---src-pages-notes-note-slug-jsx",
    "path": "/notes/acid/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ACID\",\n  \"Authors\": \"\",\n  \"Published\": true,\n  \"Media\": {\n    \"id\": \"]oDP\",\n    \"name\": \"Article\",\n    \"color\": \"default\"\n  },\n  \"Slug\": \"acid\",\n  \"Source\": \"Wikipedia\",\n  \"Date\": {\n    \"start\": \"2022-02-07T00:00:00.000Z\",\n    \"end\": null,\n    \"time_zone\": null\n  },\n  \"Category\": {\n    \"id\": \"7c590fdc-8922-4760-8d45-5b3cf6f6b991\",\n    \"name\": \"Development\",\n    \"color\": \"default\"\n  },\n  \"Type\": {\n    \"type\": \"string\",\n    \"string\": \"Note\"\n  },\n  \"URL\": \"https://en.wikipedia.org/wiki/ACID\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"What happens if the power fails partway through a series of database operations? \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ACID\"), \" (atomicity, consistency, isolation, durability) is a set of principles that can be applied to transactions to ensure they\\u2019re valid. These ideas were coined during the 1970s and 1980s, and exist in database systems today.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Atomicity:\"), \" Each transaction is treated as a single unit. Either all of the operations in the transaction succeed, or none of them do. This prevents the \\u201Cbank transfer\\u201D problem, where money is removed from one account but not applied to another.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Consistency (correctness):\"), \" The transaction must bring the database from one valid state to another. This includes things like database constraints, cascades and triggers. For example, if an operation in a transaction had a trigger, but the trigger was not applied when the transaction was completed, then the database would not be consistent.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Isolation:\"), \" If multiple transactions are executing concurrently, this principle ensures the result would be the same as if they were executing sequentially. Another way of viewing this is \\u201Chow and when the changes made by one operation become visible to others.\\u201D\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Durability:\"), \" \\u201COnce a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash). In simplified terms, this means transactions are written to disk. This is especially important in distributed database systems, where multiple servers must coordinate.\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"note":{"authors":[""],"category":"Development","media":"Article","date":"2022-02-07","published":true,"slug":"acid","source":"Wikipedia","title":"ACID","url":"https://en.wikipedia.org/wiki/ACID"}},"pageContext":{"id":"e1d4fbb6-77c2-5347-a575-dbe0f41f2838","slug":"acid","__params":{"slug":"acid"}}},
    "staticQueryHashes": []}
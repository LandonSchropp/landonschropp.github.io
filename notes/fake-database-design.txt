1:"$Sreact.fragment"
2:I[9928,[],""]
3:I[1054,[],""]
4:I[383,["458","static/chunks/458-d936935f6de7c2f9.js","763","static/chunks/app/notes/layout-b12473e1ad399ce3.js"],"MainNavigation"]
5:"$Sreact.suspense"
7:I[9209,[],"OutletBoundary"]
9:I[9209,[],"MetadataBoundary"]
b:I[9209,[],"ViewportBoundary"]
d:I[4455,[],""]
:HL["/_next/static/css/d40ab0564747cb66.css","style"]
:HL["/_next/static/css/5aabacac4a7bcbc4.css","style"]
:HL["/_next/static/css/b7bdc2d4d4aa6554.css","style"]
:HL["/_next/static/css/9cad1c3a621a47c7.css","style"]
:HL["/_next/static/css/34f92507e61baad2.css","style"]
0:{"P":null,"b":"rJvg0KUuQj6HUJizNv5yz","p":"","c":["","notes","fake-database-design"],"i":false,"f":[[["",{"children":["notes",{"children":[["slug","fake-database-design","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d40ab0564747cb66.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en-us","className":"h-full text-[19px] md:text-[21px] lg:text-[22px]","children":[["$","head",null,{"children":[["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com","crossOrigin":"anonymous"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Gentium+Book+Plus:ital,wght@0,400;0,700;1,400;1,700&family=Open+Sans:ital,wght@0,400;0,700;0,800;1,400;1,700;1,800&family=Source+Code+Pro:ital,wght@0,400;0,700;1,400;1,700&display=swap","rel":"stylesheet"}],["$","link",null,{"rel":"shortcut icon","type":"image/png","href":"/_next/static/media/flannel.5168cfc2.png"}]]}],["$","body",null,{"className":"flex h-full flex-col bg-theme-background font-serif font-normal text-theme-text *:flex-[0_0_auto]","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],null],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["notes",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5aabacac4a7bcbc4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b7bdc2d4d4aa6554.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/9cad1c3a621a47c7.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/34f92507e61baad2.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],[["$","$L4",null,{}],["$","main",null,{"className":"mx-auto w-[70ch] max-w-full px-2 md:px-4","children":["$","$5",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","notes","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]]}],{"children":[["slug","fake-database-design","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","notes","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",null,["$","$L7",null,{"children":"$L8"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Ww7AF9x9U1P2MJZ4D4pQ6",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],null]}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:I[3176,["794","static/chunks/794-3921d1a8df069f9c.js","740","static/chunks/app/notes/%5Bslug%5D/page-d0c2f0b3305d5fd0.js"],"Note"]
f:T1808,Developers are generally bad at database design, even when they are great at SQL.

What does it mean to have a well-designed database?

- _Generally normalized_
- Denormalized only as necessary
- No data is duplicated

## Rules for Designing Good Databases

1. **Nouns == tables.** A good place to start is by building your tables out from the nouns in the domain.

   When determining if a noun should be a column within another table or a table by itself, consider if that noun belongs to that table. In other words, does the noun make sense when separated from the rest of the table? For example, it wouldn’t make sense to separate a `name` column from a `people` table because the name is completely tied to the person. However, it may make sense to separate an `address` column from a `customers` table if the address can be considered in other contexts.

2. **Use foreign key constraints.** If one table uses an ID from another table, it must use a foreign key constraint. These constraints help to maintain _referential integrity_, which prevents bad references. If you don’t use foreign key constraints, your data will inevitably end up inconsistent.
3. **Lists of things get their own table.** You can loosely define a list as something that can have zero, one or many elements (with exceptions).
4. **Many-to-many relationships should use a lookup table.** These relationships should use foreign key constraints.
5. **Equality ≠ Identity.** When we say no duplication, we mean not duplicating the _identity_ of two things. It’s completely possible for two records to share the same data but to be unique instances. For example, you could have two records in a `people` table that both have the name `John Smith` but still represent unique individuals.

   This rule can be summed up as: _watch for equal values that aren’t identical._

6. **Name columns as descriptively as possible.** Names are very important in databases. Names should hint at their use. You should carefully consider the names of things. _In a well-designed database, it should be hard to insert bad data._

   He doesn’t like `id` columns. He’d prefer `<table>_id`. I think this makes sense when you’re writing raw SQL, but it’s better to stick to the framework conventions when using an ORM.

7. **Avoid `null` values.** Curtis defines `null` as an unknown value and claims we shouldn’t use them most of the time.

   The first point I disagree with is his definition of `null`. The common definition of `null` is not unknown—it’s _nothing_.

   I’m on the fence about this point. On one hand, he points out several situations where I think it’s good to avoid `null` values:

   - When `null` is used to represent an unknown value, then I agree with his point. In those cases, it definitely makes sense to avoid them.
     This is distinct from when `null` is used to represent “nothing,” which is a perfectly valid time to use `null`.
     When `null` is being used in place of another value as a special case, then two columns are probably more appropriate, or switching to an `enum` in the case of a flag. For example, using `null` to represent a one-time event in a `frequency` integer column might be tempting, but that’s not the same as “nothing.”
   - Rather than using `null` to indicate something is missing, it might be better to break those values out into a separate table. This applies especially when multiple columns, such as in an address, are tied together. In these cases, the existence or non-existence of a record is a better indicator if something has an address.

   Curtis also lists query complexity as a reason for avoiding `null`, but with an ORM like Rails, that complexity is abstracted away, so it’s not a concern.

   Finally, using other values, such as an empty string, to represent “nothing” is an anti-pattern. In these cases, you’re creating a “magic value” that’s not clear from the type of your column, which comes with its own downsides.

## Jargon

Curtis mentions several terms during his talk. While his talk isn’t about formal terminology, I thought it might still be helpful to note down some of the definitions.

- **Normalization:** “[The] process of structuring a database, usually a relational database, in accordance with a series of so-called normal forms, in order to reduce data redundancy and improve data integrity.” ([Wikipedia](https://en.wikipedia.org/wiki/Database_normalization)) This idea was first proposed by Edgar F. Codd as part of his relational model. _A database is typically said to be normalized if it meets the third normal form (3NF)._
- **Normal forms:** These are a hierarchy of rules that can be applied to databases. Each rule adds a new constraint.

  ![A table of the normal forms from Wikipedia](normal-forms.png)

- **Data integrity:** "Data integrity is the overall accuracy, completeness, and consistency of data. Data integrity also refers to the safety of data in regard to regulatory compliance — such as GDPR compliance — and security. It is maintained by a collection of processes, rules, and standards implemented during the design phase.” ([Qlik](https://www.qlik.com/us/data-management/data-integrity))
- **Data definition language (DDL):** “A syntax for creating and modifying database objects such as tables, indices, and users” ([Wikipedia](https://en.wikipedia.org/wiki/Data_definition_language))
- **Surrogate key:** An artificially generated key that uniquely identifies a row. This key should have no semantic relationships with the data in the record. An example might be a UUID. The primary advantage of using surrogate keys is that the identifier is insulated from changes to the data.
- **Natural key:** A unique key tied to the data in a record. An example might be a zip code acting as a primary key to identify a mail delivery zone. These are also called _business keys_ or _domain keys._
- **Referential integrity:** All of the references (via foreign keys) are valid. This ensures non-existent references can’t be created or updated and that records can’t be deleted while referenced elsewhere.6:["$","$Le",null,{"note":{"title":"How to Fake a Database Design","slug":"fake-database-design","date":"2022-02-06","published":true,"markdown":"$f","filePath":"/Users/landon/Notes/Resources/Notes/Development/How to Fake a Database Design/How to Fake a Database Design.md","authors":["Curtis Poe"],"category":"Development","media":"Recorded Talk","url":"https://www.youtube.com/watch?v=y1tcbhWLiUM","source":"YAPC Eurpoe 2014"}}]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Landon Schropp – How to Fake a Database Design"}],["$","meta","2",{"name":"description","content":"Landon Schropp's notes about How to Fake a Database Design"}],["$","meta","3",{"name":"author","content":"Landon Schropp"}]]
8:null

1:"$Sreact.fragment"
2:I[9928,[],""]
3:I[1054,[],""]
4:I[383,["307","static/chunks/app/today-i-learned/layout-a06ba38f4314cab9.js"],"MainNavigation"]
5:"$Sreact.suspense"
7:I[9209,[],"OutletBoundary"]
9:I[9209,[],"MetadataBoundary"]
b:I[9209,[],"ViewportBoundary"]
d:I[4455,[],""]
:HL["/_next/static/css/d40ab0564747cb66.css","style"]
:HL["/_next/static/css/5aabacac4a7bcbc4.css","style"]
0:{"P":null,"b":"rJvg0KUuQj6HUJizNv5yz","p":"","c":["","today-i-learned"],"i":false,"f":[[["",{"children":["today-i-learned",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d40ab0564747cb66.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en-us","className":"h-full text-[19px] md:text-[21px] lg:text-[22px]","children":[["$","head",null,{"children":[["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com","crossOrigin":"anonymous"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Gentium+Book+Plus:ital,wght@0,400;0,700;1,400;1,700&family=Open+Sans:ital,wght@0,400;0,700;0,800;1,400;1,700;1,800&family=Source+Code+Pro:ital,wght@0,400;0,700;1,400;1,700&display=swap","rel":"stylesheet"}],["$","link",null,{"rel":"shortcut icon","type":"image/png","href":"/_next/static/media/flannel.5168cfc2.png"}]]}],["$","body",null,{"className":"flex h-full flex-col bg-theme-background font-serif font-normal text-theme-text *:flex-[0_0_auto]","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],null],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["today-i-learned",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5aabacac4a7bcbc4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],[["$","$L4",null,{}],["$","main",null,{"className":"mx-auto w-[70ch] max-w-full px-2 md:px-4","children":["$","$5",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","today-i-learned","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",null,["$","$L7",null,{"children":"$L8"}]]}],{},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","q-AV3FnMzcrTrdgDaPdu0",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],null]}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Landon Schropp – Today I Learned"}],["$","meta","2",{"name":"description","content":"Langague and framework tips and tricks I've learned while coding"}]]
8:null
e:I[4010,["221","static/chunks/221-ccb28e40b7ab0ae2.js","24","static/chunks/app/today-i-learned/page-ad3d0e369420c559.js"],"TodayILearnedSummaries"]
6:["$","$Le",null,{"todayILearneds":[{"title":"`for await...of`","slug":"for-await-of","date":"2024-10-24","published":true,"markdown":"Today, I ran across [`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of), which is some handy JavaScript syntax for iterating through collections of promises. With this syntax, you can easily iterate through arrays of promises without having to await each one.\n\n```javascript\nfunction wait(milliseconds) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve(milliseconds), milliseconds),\n  );\n}\n\nconst timeouts = [wait(1000), wait(2000), wait(3000)];\n\nfor (const timeout of timeouts) {\n  console.log(await timeout);\n}\n```\n\nThis example would output:\n\n```\n1000\n2000\n3000\n```","filePath":"/Users/landon/Notes/Resources/Today I Learned/`for await...of`.md","technology":"TypeScript / JavaScript"},{"title":"Viewing CSVs in bat","slug":"bat-csv","date":"2024-10-24","published":true,"markdown":"Today I learned that if you view a CSV file with [bat](https://github.com/sharkdp/bat), it’ll print each column in a different color so you can easily distinguish between them.\n\n![Example CSV displayed with bat](example-csv.png)","filePath":"/Users/landon/Notes/Resources/Today I Learned/Viewing CSVs in bat/Viewing CSVs in bat.md","technology":"Shell"},{"title":"Git Switch and Git Restore","slug":"git-switch-and-git-restore","date":"2024-03-05","published":true,"markdown":"One of the tricky things about using Git is that some of the commands have multiple meanings. An example of this is `git checkout`, which can either switch your branch *or* restore the previous state of a file.TIL there are two relatively new *experimental* commands in Git to replace `checkout`’s functionality\n\n- `git switch`: Switch your current branch.\n- `git restore`: Restores the contents of the file from a specified source (such as `HEAD`).\n\nThe nice thing about using these commands instead of `checkout` is that you’ll get better autocompletion.","filePath":"/Users/landon/Notes/Resources/Today I Learned/Git Switch and Git Restore.md","technology":"Git"},{"title":"Create a join table in a Rails migration","slug":"create-join-table","date":"2024-03-01","published":true,"markdown":"Rails has a handy `create_join_table` migration helper for `has_and_belongs_to_many` relationships. This automatically sets up the relationship table, sets `id: false`, adds the references, and follows the conventions needed to make `has_and_belongs_to_many` work without extra configuration.\n\n```ruby\ncreate_join_table :articles, :tags\n```\n\nThe `create_join_table` method can optionally be passed a block, which allows you to extend the created table. This is handy for adding a unique index.\n\n```ruby\ncreate_join_table :articles, :tags do |t|\n  t.index :article_id\n  t.index :tag_id\n  t.index [:article_id, :tag_id], unique: true,\nend\n```\n\nOne gotcha to be aware of: `create_join_table` doesn’t automatically foreign key constraints or reference indices. You have to do that yourself.\n\n```ruby\nadd_foreign_key :articles_tags, :articles\nadd_foreign_key :articles_tags, :tags\n```","filePath":"/Users/landon/Notes/Resources/Today I Learned/Create a join table in a Rails migration.md","technology":"Ruby"},{"title":"String#demodulize","slug":"string-demodulize","date":"2024-01-24","published":true,"markdown":"Do you have a class name string like `\"Foot::Bar::Example\"`, and you just want the last part? You can call [`demodulize`](https://apidock.com/rails/String/demodulize) , a handy `ActiveSupport` method.\n\n```ruby\n\"Foo::Bar::Example\".demodulize # \"Example\"\n```","filePath":"/Users/landon/Notes/Resources/Today I Learned/String#demodulize.md","technology":"Ruby"},{"title":"Anonymous Collection Proxies","slug":"anonymous-collection-proxies","date":"2024-01-22","published":true,"markdown":"Today I learned you can pass a block to relationships like `has_many`, which lets you extend the collection proxy *anonymously* with new methods.\n\n```ruby\nclass Account < ActiveRecord::Base\n  has_many :people do\n    def find_or_create_by_name(name)\n      first_name, last_name = name.split(\" \")\n      find_or_create_by(first_name:, last_name:)\n    end\n  end\nend\n\nperson = Account\n  .first\n  .people\n  .find_or_create_by_name(\"Landon Schropp\")\n\nperson.first_name # => \"Landon\"\nperson.last_name  # => \"Schropp\"\n```\n\nThis is not documented in the [Active Record Associations](https://guides.rubyonrails.org/association_basics.html) guide, but it is in the [`ActiveRecord::Assocations::ClassMethods`](https://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#module-ActiveRecord::Associations::ClassMethods-label-Association+extensions) documentation.","filePath":"/Users/landon/Notes/Resources/Today I Learned/Anonymous Collection Proxies.md","technology":"Ruby"},{"title":"TypeScript Dedent","slug":"typescript-dedent","date":"2023-12-10","published":true,"markdown":"Today I learned about [TypeScript Dedent](https://github.com/tamino-martinius/node-ts-dedent), a nifty little TypeScript package that’ll let you nicely indent multiline template strings. For example, this:\n\n```tsx\nconsole.log(dedent`\n  Leading and trailing lines will be trimmed, so you can \n  write something like this and have it work as you'd \n  expect:\n\n  * How convenient it is...\n  * ...that I can use an indented list...\n    - ...and still have it do the right thing.\n\n  That's all.\n`);\n```\n\nOutputs this:\n\n```\nLeading and trailing lines will be trimmed, so you can\nwrite something like this and have it work as you\nexpect:\n\n* How convenient it is...\n* ...that I can use an indented list...\n  - ...and still have it do the right thing.\n\nThat's all.\n```","filePath":"/Users/landon/Notes/Resources/Today I Learned/TypeScript Dedent.md","technology":"TypeScript / JavaScript"},{"title":"Automatically Set Upstream Branch","slug":"automatically-set-upstream-branch","date":"2023-12-01","published":true,"markdown":"Sick of this error from Git when trying to pull from a branch other than `main`?\n\n```\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream example origin/<branch>\n```\n\nGit 2.37.1 (released in Q3 2022) added a new option to automatically set the upstream branch when you push:\n\n```bash\ngit config --global push.autoSetupRemote true\n```","filePath":"/Users/landon/Notes/Resources/Today I Learned/Automatically Set Upstream Branch.md","technology":"Git"},{"title":"Rspec Include Matchers","slug":"rpsec-include-matchers","date":"2023-07-25","published":true,"markdown":"You can use Rspec matchers inside of `include` to test multiple values in the hash.\n\n```ruby\nbanana = {\n  name: \"banana\",\n  type: \"cavendish\",\n  colors: [\"yellow\", \"green\"],\n}\n\nexpect(banana).to include(\n  name: \"banana\",\n  type: match(/cav/),\n  colors: match_array([\"green\", \"yellow\"]),\n)\n```\n\nThe example above ensures the `banana` hash includes a `:name` key with a value of `\"banana\"`, a `:type` that matches the regular expression `/cav/` , and a `:colors` key that contains an array with the elements `\"green\"` and `\"yellow\"` in any order.","filePath":"/Users/landon/Notes/Resources/Today I Learned/Rspec Include Matchers.md","technology":"Ruby"}]}]

#!/usr/bin/env bash

set -euo pipefail

# TODO: Find a way to eliminate these hardcoded values.
FNM="/opt/homebrew/bin/fnm"
ENVIRONMENT_FILE="$HOME/Development/landonschropp.com/.envrc"

# Display a notification if the script fails.
trap 'osascript -e "display notification \"ðŸ˜µ Failed to deploy.\" with title \"landonschropp.com\""' ERR

# Wait a minute before attempting to deploy to ensure a network is present.
sleep 60

# Clone the repo to a temporary directory.
TEMP_DIR=$(mktemp -d)

git clone --depth 1 git@github.com:LandonSchropp/landonschropp.github.io.git "$TEMP_DIR"
cd "$TEMP_DIR"

# Source the environment variables used by the build.
# shellcheck disable=SC1090
source "$ENVIRONMENT_FILE"

# Check if the latest SHA for the content has already been deployed. Given how simple this check is
# and that it relies on a temporary file, it's likely to occasionally miss. However, if that happens
# the site simply deploys, which is fine.
SHA=$(
  (
    ls -alR "$NOTES_PATH" "$ARTICLES_PATH" "$TODAY_I_LEARNED_PATH"
    git rev-parse HEAD
  ) | sha1sum
)

SHA_PATH="/tmp/com.landonschropp.deploy.sha"

if [ -f "$SHA_PATH" ] && [ "$SHA" = "$(cat "$SHA_PATH")" ]; then
  osascript -e 'display notification "ðŸ˜Ž Nothing to deploy" with title "landonschropp.com"'
  exit 0
fi

# Set up pnpm and node
eval "$($FNM env --corepack-enabled)"
$FNM use --install-if-missing
corepack enable pnpm

# Install the dependencies
pnpm install

# Build the project
pnpm build

# Deploy the build
pnpm gh-pages --dist dist

# Write the SHA after a successful deployment.
echo "$SHA" >"$SHA_PATH"

# Display a notification if the deployment succeeds.
osascript -e 'display notification "ðŸ¥³ Deployed successfully!" with title "landonschropp.com"'
